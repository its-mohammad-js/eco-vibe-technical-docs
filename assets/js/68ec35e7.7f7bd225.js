"use strict";(self.webpackChunkeco_vibe_document=self.webpackChunkeco_vibe_document||[]).push([[8385],{1938:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"Quick Dev Guide/App&Routes","title":"App component structure","description":"To maintain a clean and organized structure within the application, the numerous pages and routes have been grouped logically and imported into separate components. This grouping aligns with the UX design, ensuring a modular and maintainable routing architecture.","source":"@site/docs/Quick Dev Guide/App&Routes.md","sourceDirName":"Quick Dev Guide","slug":"/Quick Dev Guide/App&Routes","permalink":"/eco-vibe-technical-docs/docs/Quick Dev Guide/App&Routes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Quick Dev Guide/App&Routes.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Technologies and Libraries Used","permalink":"/eco-vibe-technical-docs/docs/Quick Dev Guide/Techs"},"next":{"title":"Reducers","permalink":"/eco-vibe-technical-docs/docs/Quick Dev Guide/Reducers"}}');var i=t(4848),o=t(8453);const r={sidebar_position:2},a="App component structure",c={},u=[];function d(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"app-component-structure",children:"App component structure"})}),"\n",(0,i.jsxs)(n.p,{children:["To maintain a clean and organized structure within the application, the numerous pages and routes have been ",(0,i.jsx)(n.strong,{children:"grouped"})," logically and imported into separate components. This ",(0,i.jsx)(n.strong,{children:"grouping aligns with the UX design"}),", ensuring a modular and maintainable routing architecture."]}),"\n",(0,i.jsx)(n.p,{children:"This approach defines the core structure of the application, consisting of grouped routes organized as child components within the main layout"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",metastring:'title="App.jsx"',children:'<AppLayout>\n  <Toaster />\n  <Routes>\n    {/* main pages */}\n    {MainRoutes}\n    {/* auth routes */}\n    {AuthRoutes}\n    {/* customer routes */}\n    {CustomerRoutes}\n    {/* seller pages */}\n    {SellerRoutes}\n    {/* 404 page */}\n    <Route path="*" element={<NotFoundPage />} />\n  </Routes>\n</AppLayout>\n'})}),"\n",(0,i.jsx)(n.p,{children:"It also includes requests to Firebase for retrieving user information and synchronizing the application with the current user's data using Redux."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",metastring:'title="App.jsx"',children:"const dispatch = useDispatch();\n\nuseEffect(() => {\n  // get user data\n  dispatch(getUserData());\n}, []);\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," You can customize and adjust the synchronization of the application with user data by gaining a better understanding of the database structure. However, in production and final deployment, ",(0,i.jsxs)(n.strong,{children:["avoid defining global states directly within the ",(0,i.jsx)("code",{children:"App.jsx"})," component"]}),". This helps prevent unnecessary re-renders and ensures better performance."]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);